import control as ctrl
import numpy as np
import matplotlib.pyplot as plt

# Определение передаточных функций элементов
# ===========================================================================
# Параметры системы
k_SP = 5  # Коэффициент передачи сельсинной пары (В/рад)
k_U = 1200  # Коэффициент усиления усилителя
T_U = 0.01  # Постоянная времени усилителя
k_D = 34.9  # Коэффициент передачи двигателя
T_D = 0.051  # Постоянная времени двигателя
i = 1.2e3  # Передаточное число редуктора
k_TG = 0.00006  # Коэффициент передачи тахогенератора
k_R = 0.00059
# k_TG = 0.00955  # Коэффициент передачи тахогенератора

# Передаточные функции элементов
W_SP = ctrl.TransferFunction([k_SP], [1])  # Сельсинная пара (безынерционное звено)
W_U = ctrl.TransferFunction([k_U], [T_U, 1])  # Усилитель (апериодическое звено)
W_D = ctrl.TransferFunction([k_D], [T_D, 1, 0])  # Двигатель (интегрирующее звено с замедлением)
W_R = ctrl.TransferFunction([k_R], [1])  # Редуктор (безынерционное звено)
W_TG = ctrl.TransferFunction([k_TG, 0], [1])  # Тахогенератор (дифференцирующее звено)

# Общая передаточная функция разомкнутой системы
W_open = W_SP * W_U * W_D * W_R
print("Передаточная функция разомкнутой системы:")
print(W_open)
# W_open = ctrl.feedback(W_open, sign=-1) # Введение общей обратной связи
# ===========================================================================

# Построение ЛАЧХ и ЛФЧХ
# ===========================================================================
# mag, phase, omega = ctrl.bode_plot(W_open, dB=True, omega_limits=[0.1, 1000])

omega = np.logspace(-1, 3, 1000)  # Диапазон частот
# mag, phase, omega = ctrl.bode(W_open, omega=omega, dB=True, plot=False)

# Постройте график и получите данные
fig, (ax1, ax2) = plt.subplots(2, 1)
mag, phase, omega = ctrl.bode(W_open, omega=omega, dB=True, plot=True)

# plt.show()

# Точная ЛАЧХ
ax1.semilogx(omega, 20 * np.log10(mag), label="Точная ЛАЧХ")

# Асимптотическая ЛАЧХ (ломаная линия)
# 1. Начальный участок (наклон -20 дБ/дек до первой сопрягающей частоты)
omega_1 = 1 / T_D  # Сопрягающая частота от двигателя (19.2 рад/с)
omega_2 = 1 / T_U  # Сопрягающая частота от усилителя (100 рад/с)
k_total = k_SP * k_U * k_D * k_R  # Общий коэффициент усиления
print("Общий коэффициент усиления", k_total)

# Участок 1: от 0.1 до omega_1 (наклон -20 дБ/дек)
omega_asymp_1 = np.array([0.1, omega_1])
mag_asymp_1 = 20 * np.log10(k_total) - 20 * np.log10(omega_asymp_1 / 1)

# Участок 2: от omega_1 до omega_2 (наклон -40 дБ/дек)
omega_asymp_2 = np.array([omega_1, omega_2])
mag_asymp_2 = (
    20 * np.log10(k_total)
    - 20 * np.log10(omega_asymp_1[1] / 1)
    - 40 * np.log10(omega_asymp_2 / omega_1)
)

# Участок 3: от omega_2 до 1000 (наклон -60 дБ/дек)
omega_asymp_3 = np.array([omega_2, 1000])
mag_asymp_3 = (
    20 * np.log10(k_total)
    - 20 * np.log10(omega_asymp_1[1] / 1)
    - 40 * np.log10(omega_asymp_2[1] / omega_1)
    - 60 * np.log10(omega_asymp_3 / omega_2)
)

# Рисуем асимптоты
ax1.semilogx(omega_asymp_1, mag_asymp_1, "r--", label="Асимптота 1 (-20 дБ/дек)")
ax1.semilogx(omega_asymp_2, mag_asymp_2, "g--", label="Асимптота 2 (-40 дБ/дек)")
ax1.semilogx(omega_asymp_3, mag_asymp_3, "b--", label="Асимптота 3 (-60 дБ/дек)")

# Настройка графика
ax1.set_xlabel("Частота [рад/с]")
ax1.set_ylabel("Амплитуда [дБ]")
ax2.set_xlabel("Частота [рад/с]")
ax2.set_ylabel("Амплитуда [дБ]")
ax2.set_title("ЛФЧХ")
ax1.set_title("ЛАЧХ")
ax1.grid(True)
ax1.legend()
plt.suptitle("")
print(ax2)
plt.show()


# Расчет запаса устойчивости
gm, pm, wg, wp = ctrl.margin(W_open)
print(f"Запас устойчивости по амплитуде: {gm:.2f} дБ")
print(f"Запас устойчивости по фазе: {pm:.2f} градусов")
# ===========================================================================

# Анализ устойчивости по критерию Гурвица
# ===========================================================================
# Коэффициенты характеристического уравнения
a0 = T_U * T_D
a1 = T_U + T_D
a2 = 1
a3 = (k_SP * k_U * k_D * k_R)  # Общий коэффициент усиления k
print("a0", a0)
print("a1", a1)
print("a2", a2)
print("k", a3)
print("k_SP", k_SP)
print("k_U", k_U)
print("k_D", k_D)
print("(K_R)", k_R)

# Условие устойчивости по Гурвицу для системы 3-го порядка
if a0 > 0 and a1 > 0 and a2 > 0 and a3 > 0 and a1 * a2 > a0 * a3:
    print("Система устойчива.")
else:
    print("Система неустойчива.")

# Расчет критического коэффициента усиления
k_critical = (a1 * a2) / (a0 * a3)
print(f"Критическое значение добротности: {k_critical:.2f}")
# ===========================================================================

# Переходная характеристика разомкнутой системы
# Моделирование переходного процесса
W_open_closed = ctrl.feedback(W_open, sign=-1)
t, y = ctrl.step_response(W_open_closed, T=np.linspace(0, 10, 1000))  # Увеличьте до 10 секунд
y *= 1  # α = 1 рад
y_steady = y[-1]
print(f"Установившееся значение: {y_steady:.2f} рад")
# Визуализация
plt.figure(figsize=(10, 6))
plt.plot(t, y, label="γ(t)")
plt.axhline(y=1, color='r', linestyle='--', label="Целевое значение")
plt.xlabel("Время (с)")
plt.ylabel("Выходной сигнал γ (рад)")
plt.title("Переходный процесс системы без обратной связи")
plt.grid(True)
plt.legend()
plt.show()
# ===========================================================================

# Введение скоростной обратной связи
# ===========================================================================
# Передаточная функция системы с обратной связью

# Внутренний контур (усилитель + двигатель + скоростная обратная связь)
W_inner = ctrl.feedback(W_U * W_D, W_TG, sign=-1)

# Замкнутая система с основной обратной связью (γ → СП)
W_closed = ctrl.feedback(W_SP * W_inner * W_R, sign=-1) # Введение общей отрицательной обратной связи (Без этого график бесконечно возрастает)
# W_closed = W_SP * W_inner * W_R # Для ЛАЧХ и ЛФЧХ как в методичке

# W_closed = ctrl.feedback(W_open, W_TG, sign=-1)
print("Передаточная функция замкнутой системы с ОС:")
print(W_closed)
# Коэффициенты характеристического уравнения
print("Характеристическое уравнение:")
den = W_closed.den[0][0]
print(den)
# Находим корни
roots = np.roots(den)
print("Корни характеристического уравнения:")
print(roots)

k_ob = (k_SP * k_U * k_D * k_TG * k_R)  # Общий коэффициент усиления k
print("КОЭФ УСИЛ С ОС", k_ob)


# ===========================================================================

omega = np.logspace(-1, 3, 1000)  # Диапазон частот
# mag, phase, omega = ctrl.bode(W_open, omega=omega, dB=True, plot=False)

# Постройте график и получите данные
fig, (ax1, ax2) = plt.subplots(2, 1)
mag, phase, omega = ctrl.bode(W_closed, omega=omega, dB=True, plot=True)

# plt.show()

# Точная ЛАЧХ
ax1.semilogx(omega, 20 * np.log10(mag), label="Точная ЛАЧХ")

# Асимптотическая ЛАЧХ (ломаная линия)
# 1. Начальный участок (наклон -20 дБ/дек до первой сопрягающей частоты)
omega_1 = 1 / T_D  # Сопрягающая частота от двигателя (19.2 рад/с)
omega_2 = 1 / T_U  # Сопрягающая частота от усилителя (100 рад/с)
k_total = k_SP * k_U * k_D * k_R  # Общий коэффициент усиления
print("Общий коэффициент усиления", k_total)

# Настройка графика
ax1.set_xlabel("Частота [рад/с]")
ax1.set_ylabel("Амплитуда [дБ]")
ax2.set_xlabel("Частота [рад/с]")
ax2.set_ylabel("Амплитуда [дБ]")
ax2.set_title("ЛФЧХ")
ax1.set_title("ЛАЧХ")
ax1.grid(True)
ax1.legend()
plt.suptitle("")
plt.show()

# Новый запас устойчивости
gm_new, pm_new, wg_new, wp_new = ctrl.margin(W_closed)
print(f"Новый запас устойчивости по амплитуде: {gm_new:.2f} дБ")
print(f"Новый запас устойчивости по фазе: {pm_new:.2f} градусов")

# Визуализация переходного процесса
# ===========================================================================
# Переходная характеристика замкнутой системы
# Моделирование переходного процесса
t, y = ctrl.step_response(W_closed, T=np.linspace(0, 10, 1000))  # Увеличьте до 10 секунд
y *= 1  # α = 1 рад
y_steady = y[-1]
print(f"Установившееся значение: {y_steady:.2f} рад")
# Визуализация
plt.figure(figsize=(10, 6))
plt.plot(t, y, label="γ(t)")
plt.axhline(y=1, color='r', linestyle='--', label="Целевое значение")
plt.xlabel("Время (с)")
plt.ylabel("Выходной сигнал γ (рад)")
plt.title("Переходный процесс системы с обратной связью")
plt.grid(True)
plt.legend()
plt.show()
# ===========================================================================
